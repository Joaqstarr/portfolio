{
  "order": "1",
  "name": "CMD: Wave",
  "tags": ["Unity", "C#"],
  "extraInfo": "Director, lead programmer, artist. <br> Created in 1 month for Metroidvania Month 23.",
  "itch": "https://joaqstarr.itch.io/cmd-wave",
  "github": "https://github.com/Joaqstarr/CMD-Wave",
  "thumbnail": "assets/cmdwave/banner.png",
  "backgroundColor": "#00140b",
  "highlightColor": "#97dcc0",

  "elements": [
    {
      "type": "paragraph",
      "content": "Created in 1 month for the Metroidvania Month 23 Game Jam with a 4 person team. <br><br>I was the lead programmer and artist/tech artist."
    },
    {
      "type": "subtitle",
      "content": "Fog Of War System"
    },
    {
      "type": "paragraph",
      "content": "To prevent the player from seeing the entire game world before exploring, I created a fog of war system that clears up as the player advances. To achieve this I store the fog as an image, changing the alpha of pixels as the player explores. This is done in a small circular radius around the player, and in the players \"radar\" vision cone."
    },
    {
    "type": "video",
      "content": "/assets/cmdwave/fowvid.webm"
    },
    {
      "type": "video",
      "content": "/assets/cmdwave/foweditorvid.webm"
    },
    {
      "type": "paragraph",
      "content": "When saving the game, the texture simply gets saved onto the drive. When loading, the game samples the texture on the drive. In engine, the texture is placed on a sprite that is placed between the game world and the camera. The fog leverages Unity's Job system to allow the expensive texture manipulation to occur on a different thread. I would like to return to this to see if a compute shader solution would be possible, however for now, multithreading enables stable performance."
    },
    {
      "type": "paragraph",
      "content": "The system also does raycasts along the radar cone, to ensure you it does not clear fog through walls. This is also used to create the cone mesh itself at runtime, this allows for the cone to appear to be blocked off by the walls of the cavern."
    },
    {
      "type": "video",
      "content": "/assets/cmdwave/radarConeMesh.webm"
    },
    {
      "type": "subtitle",
      "content": "Colorblind Accessibility Option"
    },
    {
      "type": "paragraph",
      "content": "1 day before the Jam deadline, I had a realization. A large portion of the game is about identifying red enemies on a green background. I also remembered, that one of my best friends just happened to be colorblind. I immediately took a screenshot and sent it to him, asking if he could identify the enemy in the image... <br><br>He responded: <i>Where is the red?</i>"
    },
    {
      "type": "image",
      "content": "/assets/cmdwave/red.jpg",
      "alt": "Screenshot depicting default color scheme. Red radar waves on green background."
    },
    {
      "type": "paragraph",
      "content": "I began trying a host of different color combinations, and sending each one to him to see which he found easiest to see. What we found worked best was pink enemies and a purple radar cone. After hooking this material swap up to a toggle setting, I rest assured knowing he would be able to play without being utterly lost."
    },
    {
      "type": "image",
      "content": "/assets/cmdwave/pink.jpg",
      "alt": "Screenshot depicting alternative color scheme, with magenta radar waves."
    },
    {
      "type": "subtitle",
      "content": "Room System"
    },
    {
      "type": "paragraph",
      "content": "In the game, you expand your submarine by collecting rooms through a terminal interface. Each room you collect grants your submarine abilities. It also physically increases the size of the sub, allowing you to walk around from room to room. This is done using a pooling system, where unused rooms are held off to the side, and snapped into their proper place when collected. The player can choose to place the room wherever there is a connecting space."
    },
    {
      "type": "video",
      "content": "/assets/cmdwave/RoomAdding.webm"
    },
    {
      "type": "paragraph",
      "content": "Originally, when adding the ability to drop rooms again, I began working on a system that determined which rooms were had no rooms depending on them, essentially only allowing you to drop the \"leaves\" of graph. I realized this would likely be overkill as I wouldn't want the player to deal with such a limitation. Instead, if a room is being depended on, it becomes a hallway, allowing for the player to still traverse the entire sub."
    },
    {
      "type": "video",
      "content": "/assets/cmdwave/roomDropping.webm"
    },
    {
      "type": "subtitle",
      "content": "Command System"
    },
    {
      "type": "paragraph",
      "content": "You interface with the submarine partially using a terminal interface. You begin with some basic commands, and each room you collect can have additional commands, increasing your abilities. For example, the Save room gives you 2 commands. Saving, and loading. These are 2 seperate classes that inherit from the CommandBase class."
    },
    {
      "type": "image",
      "content": "/assets/cmdwave/saveRoom.jpg",
      "alt": "Screenshot depicting inspector view of the Save/Load room"
    },    {
      "type": "paragraph",
      "content": "Below is a snippet of the BaseCommand Class. Execute gets overriden in each individual command. This gets ran when you call the command itself. It returns output text to be sent to the terminal. Override Context allows for the command to ask a question and await an answer, setting which commands will be valid for the next input. Because of this, the CheckCommand method is virtual. Generally commands are checked by their name, but in certain situations, they may be awaiting a number or text response. This method can be overriden so it can look for exactly what the command needs. They also have a sound effect out parameter, which allows for different sounds to play based off the command. Finally they have an argument, which allows for commands to take in extra info beyond their name."
    },
    {
      "type": "code",
      "content": "public abstract string[] Execute(out CommandContext overrideContext, out AudioClip sfx, string arg =null);\\n\\npublic virtual bool CheckCommand(string commandName)\\n{\\n    return _commandName.ToLower() == commandName.ToLower();\\n}",

      "language": "C#"
    },
    {
      "type": "video",
      "content": "/assets/cmdwave/commandSystem.webm"
    }
  ]
}
